# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ –æ–±—â–µ–Ω–∏—é –±–æ—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ –ª–∏—á–∫–µ
from asyncio import sleep
from aiogram import F, types, Router
# –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
from aiogram.filters import CommandStart
# –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º–∏ —Å–µ—Å—Å–∏—è–º–∏
from sqlalchemy.ext.asyncio import AsyncSession

# –Ω–∞—à–∏ –∏–º–ø–æ—Ä—Ç—ã
# –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ª–∏—á–∫–∞, –≥—Ä—É–ø–ø–∞, —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞
from filters.chat_types import ChatTypeFilter
# –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
from kbds.inline import (
    MenuCallBack, UserCallBack, 
    BackCallBack, ChoiseCallBack, 
    get_back_kbds, type_give)
# –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ë–î
from database.orm_query import (
    orm_get_user,
    orm_update_user_place,
    orm_add_user,
    orm_update_user_phone,
    User
)
from aiogram.fsm.context import FSMContext
from states.state import UserState
# –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –º–µ–Ω—é
from handlers.menu_processing import get_menu_content
from . import message_edit

# —Å–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –ª–∏—á–∫–∏
user_private_router = Router()
# –ø–æ–¥–∫–ª—é—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –≥–¥–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ä–æ—É—Ç–µ—Ä (–≤ –ª–∏—á–∫–µ, –≤ –≥—Ä—É–ø–ø–µ, —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–µ)
user_private_router.message.filter(ChatTypeFilter(['private']))

@user_private_router.message(CommandStart())
async def start_cmd(message: types.Message, session: AsyncSession):
    # –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å 0 –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ–Ω—é - main (–≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)

    media, reply_markup, description = await get_menu_content(session, level=0, menu_name="main_start")
    await orm_add_user(session, user_id=message.from_user.id, first_name=message.from_user.first_name,
                    last_name=message.from_user.last_name, phone=None)
        
    await message_edit(message, description, media, reply_markup, edit=False)

async def user_change_place(user: User, id_place: str, session: AsyncSession):
    media, reply_markup, message = await get_menu_content(session, level=0, menu_name="main")
    answer = await get_menu_content(session, level=0.1, menu_name="change_answer")

    await orm_update_user_place(session, user_id=user.user_id, place_id=id_place)
    return media, reply_markup, message, answer

@user_private_router.message(UserState.waiting_for_phone)
async def user_get_phone(message: types.Message, session: AsyncSession, state: FSMContext):
    data = await state.get_data()
    message_question: types.Message = data["message"]

    if message.contact is None:
        phone = message.text
    else:
        phone = '+' + message.contact.phone_number
    
    await message.delete()

    if len(phone) != 12 or phone[:2] != "+7":
        message = await message.answer("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω–æ!\n–§–æ—Ä–º–∞—Ç: +79999999999")
        await sleep(3)
        await message.delete()
        return
    
    answer = await get_menu_content(session, level=0.1, menu_name="change_answer")
    
    await state.clear()
    await orm_update_user_phone(session, user_id=message.from_user.id, phone=phone)

    await message_question.delete()
    message = await message.answer(answer)
    media, reply_markup, text_message = await get_menu_content(session, level=0, menu_name="main")
    await sleep(2)
    await message_edit(message, text_message, media=media, reply_markup=reply_markup)

@user_private_router.callback_query(UserCallBack.filter())
async def user_local_menu(callback: types.CallbackQuery, 
                          callback_data: UserCallBack, session: AsyncSession, state: FSMContext):

    user = await orm_get_user(session, callback.from_user.id)
    data = callback_data.data.split("_")
    answer = None
    media = None
    
    if "place" in data:
        if "change" in data:
            reply_markup, message = await get_menu_content(session, level=0.1, 
                                                               menu_name="places_change")
        else:
            media, reply_markup, message, answer = await user_change_place(user, data[-1], session)
    
    elif "phone" in data:
        reply_markup, message = await get_menu_content(session, level=0.1,menu_name="phone_change")
        await callback.message.delete()
        message = await callback.message.answer(message, reply_markup=reply_markup)
        await state.update_data(message=message)
        await state.set_state(UserState.waiting_for_phone)
        return
    
    elif "menu" in data:
        media, reply_markup, message = await get_menu_content(session, level=1, 
                                                              menu_name="user_main",
                                                              user=user)
    
    if not answer is None:
        await callback.answer(answer)

    await message_edit(callback.message, message, media=media, reply_markup=reply_markup)

@user_private_router.message(UserState.waiting_text)
async def user_get_text(message: types.Message, session: AsyncSession, state: FSMContext):
    await message.delete()
    data = await state.get_data()
    message_answer:types.Message = data["message"]
    message_output = await message.answer("–ó–∞–ø–∏—Å–∞–ªüìù")
    await message_answer.delete()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è", reply_markup=type_give(5, message.text))
    await state.clear()
    await message_output.delete()
    return


@user_private_router.callback_query(UserState.waiting_text, BackCallBack.filter())
async def user_queru_back(callback: types.CallbackQuery, 
                    callback_data: MenuCallBack, 
                    session: AsyncSession, state: FSMContext):
    await callback.message.delete()
    await state.clear()

@user_private_router.callback_query(MenuCallBack.filter())
async def user_menu(callback: types.CallbackQuery, 
                    callback_data: MenuCallBack, 
                    session: AsyncSession, state: FSMContext):
    
    media, reply_markup, *message = await get_menu_content(
        session,
        level=callback_data.level,
        menu_name=callback_data.menu_name,
        category=callback_data.category,
        product_id=callback_data.product_id,
        page=callback_data.page,
        user=callback.from_user.id,
        data=callback_data.data,
        place=callback_data.place
    )

    if len(message) > 1:
        if isinstance(message[1], tuple):
            answer, flag = message[1]
        else:
            answer = message[1]
            flag = False
    else:
        answer = None

    message = message[0]

    if callback_data.menu_name == "choise":
        await state.update_data(category=callback_data.category)

    # elif callback_data.menu_name == "send":
    #     await callback.message.answer(message)

    if message == "phone":
        reply_markup, message = await get_menu_content(session, level=callback_data.level, menu_name="phone_change")
        message = await callback.message.answer(message, reply_markup=reply_markup)
        await state.update_data(message=message)
        await state.set_state(UserState.waiting_for_phone)
        return
    
    if message == "–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ –∑–∞–∫–∞–∑—É":
        reply_markup = get_back_kbds(callback_data.level, callback_data.menu_name)
        message = await callback.message.answer(message, reply_markup=reply_markup)
        await state.update_data(message=message)
        await state.set_state(UserState.waiting_text)
        return

    if not answer is None:
        await callback.answer(answer)
        if not flag:
            return
    
    await message_edit(callback.message, message, media=media, reply_markup=reply_markup)
    

@user_private_router.callback_query(ChoiseCallBack.filter())
async def add_product(callback: types.CallbackQuery, callback_data: ChoiseCallBack, session: AsyncSession, state: FSMContext):
    message, kb, answer = await get_menu_content(session=session,
                                        level=callback_data.level,
                                         menu_name=callback_data.menu_name,
                                         product_id=callback_data.product_id,
                                         price=callback_data.price,
                                         weight=callback_data.weight,
                                         user=callback.from_user.id,
                                         dop=callback_data.dop,
                                         sirop=callback_data.sirop)
    
    if not answer is None:
        await callback.message.delete()
        return await callback.answer(answer)
    
    await message_edit(callback.message, message, reply_markup=kb)

@user_private_router.message()
async def message_from_user(message: types.Message, session: AsyncSession):
    if not message.via_bot is None and message.via_bot.is_bot:
        id_product, category =list(map(int, message.text.split(".")))

        message_output, kb, _ = await get_menu_content(session=session, level=4, menu_name="add_product",
                                             product_id=id_product)
        
        await message.answer(message_output, reply_markup=kb)
    
    await message.delete()