from aiogram.types import InputMediaPhoto
from sqlalchemy.ext.asyncio import AsyncSession
import string, random

from database.orm_query import (
    orm_get_category_podcategory,
    orm_get_product,
    orm_delete_product,
    orm_get_banners,
    orm_get_banner,
    orm_get_categories,
    orm_get_products,
    orm_get_user_carts,
    orm_reduce_product_in_cart,
    User
)
from kbds.inline import (
    get_callback_btns,
    get_user_catalog_btns,
    get_user_main_btns,
    get_user_local_btns,
    get_main_btns,
)

from kbds.admin_inline import (
    get_admin_podcatalog_btns,
    get_banners_btns,
    get_admin_product,
    get_admin_products_btns,
    get_cancel_btns,
    get_admin_catalog_btns
)

from kbds.reply import get_keyboard

def generate_random_word(length):
    letters = string.ascii_lowercase  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã
    return ''.join(random.choice(letters) for _ in range(length))

ADMIN_KB = get_keyboard(
    # "–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä",
    "–î–æ–±–∞–≤–∏—Ç—å –∫–æ—Ñ–µ–π–Ω—é",
    "–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç",
    "–î–æ–±–∞–≤–∏—Ç—å/–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–Ω–Ω–µ—Ä",
    placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
    sizes=(2,),
)

BACK_KB = get_keyboard(
    "–ù–∞–∑–∞–¥",
    "–û—Ç–º–µ–Ω–∞",
    placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
    sizes=(1, 1),
)

CANCEL_KB = get_keyboard(
    "–û—Ç–º–µ–Ω–∞",
    placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
    sizes=(1, 1),
)

EDIT_KB = get_keyboard(
    "–ò–∑–º–µ–Ω–∏—Ç—å",
    "–û—Ç–º–µ–Ω–∞",
    placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
    sizes=(2,),
)

async def catalog(session, level, menu_name, category, podcategory):
    message = "Error!"
    state = None
    kbds = None
    if category is None:
        if "catalog" in menu_name:
            message = "–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é" 
            categories = await orm_get_categories(session)
            kbds = get_admin_catalog_btns(level=level, menu_name="catalog", categoris=categories)
        elif "add" in menu_name:
            message = "–ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –º–µ–Ω—é –∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏"
            state = "catalog_add"
            kbds = get_cancel_btns(level=level, menu_name="catalog")
    elif isinstance(category, int):
        if "add" in menu_name:
            message = "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ–Ω—é"
            state = "podcatalog_add"
            kbds = get_cancel_btns(level=level, menu_name="catalog", category=category)
        elif "change" in menu_name:
            message = "–û—Ç–ø—Ä–∞–≤—Ç–∏ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ"
            kbds = get_cancel_btns(level=level, menu_name="catalog", category=category)
            state = "catalog_add"
        else:
            message = "–í—ã–±–µ—Ä–µ—Ç–µ –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é"
            podcategorys = await orm_get_category_podcategory(session, category)
            if not podcategory is None:
                message = "–í—ã–±–µ—Ä–µ—Ç–µ –ø—Ä–æ–¥—É–∫—Ç"
                products = await orm_get_products(session, category_id=category, podcategory_id=podcategory if podcategory != -1 else None)
                kbds = get_admin_products_btns(level=level, menu_name=menu_name, products=products, category=category, podcategory=podcategory)
            else:
                kbds = get_admin_podcatalog_btns(level=level, podcategorys=podcategorys, 
                                        menu_name=menu_name, category=category, sizes=(1,))

    return {"kbds": kbds, "message": message, "state": state}


async def product(session, level, menu_name, 
                  product_id, category, podcategory):
    state = None 
    kbds = None
    message = "Error!"

    if not product_id is None:
        product = await orm_get_product(session, product_id)

        if "delete" in menu_name:
            await orm_delete_product(session, product_id)
            return await catalog(session, level-1, "catalog", category=product.category_id, podcategory=product.podcategory_id if not product.podcategory_id is None else -1)
        elif "value" in menu_name:
            message = f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –æ–±—ä—ë–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á–∏—Å–ª–∞ –∏–ª–∏ —á–µ—Ä–µ–∑ /"
            state = "value"
            kbds = get_cancel_btns(level=level, menu_name="product", product_id=product_id)
        elif "price" in menu_name:
            message = f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —Ü–µ–Ω—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á–∏—Å–ª–∞ –∏–ª–∏ —á–µ—Ä–µ–∑ /\n(!!! –ö–æ–ª-–≤–æ —á–∏—Å–ª–µ —á–µ—Ä–µ–∑ / –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –∫–æ–ª–∏—á–µ—Ç—Å–≤–æ–º —á–∏—Å–µ–ª —á–µ—Ä–µ–∑ / —É –æ–±—ä—ë–º–∞)"
            state = "price"
            kbds = get_cancel_btns(level=level, menu_name="product", product_id=product_id)
        else:
            message = f"–ù–∞–∑–≤–∞–Ω–∏–µ - {product.name}\n"
            message += f"–û–±—ä—ë–º - {product.weight}\n"
            message += f"–¶–µ–Ω–∞ - {product.price}‚ÇΩ"
            kbds = get_admin_product(level=level, product_id=product_id, category=product.category_id, podcategory=product.podcategory_id)
    elif "add" in menu_name:
        if "price" in menu_name:
            message = "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä—É, –µ—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ü–µ–Ω, –≤–≤–µ–¥–∏—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ /"
            kbds = get_cancel_btns(level=level, menu_name="add", category=category, podcategory=podcategory)
            state = "next" if not "back" in menu_name else menu_name
        elif "weight" in menu_name:
            message = "–í–≤–µ–¥–∏—Ç–µ –æ–±—ä—ë–º —Ç–æ–≤–∞—Ä–∞, –µ—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–∑–∏—Ü–∏–π, –≤–≤–µ–¥–∏—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ /"
            kbds = get_cancel_btns(level=level, menu_name="add_back_product_price", category=category, podcategory=podcategory)
            state = "next"
        else:
            message = "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"
            state = "product_add"
            kbds = get_cancel_btns(level=level-1, menu_name="choise", category=category, podcategory=podcategory)


    return {"kbds": kbds, "message": message, "state": state}

async def banner_change(session, level, menu_name, category):
    state = None
    if category is None:
        banners = await orm_get_banners(session)
        kbds = get_banners_btns(data=banners, level=level, menu_name=menu_name)
        message = "–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–Ω–µ—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è"
    elif "change_desc" in menu_name:
        message = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"
        kbds = get_cancel_btns(level=level, menu_name="banner", category=category)
        state = "banner_description"
    else:
        banner = await orm_get_banner(session, category)
        message = f"‚úÖ–ù–∞–∑–≤–∞–Ω–∏–µ: {banner.name}\nüîÑ–û–ø–∏—Å–∞–Ω–∏–µ: {banner.description}"

        btns = {"–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ": "change_desc",
                "–ù–∞–∑–∞–¥": "back"}
        kbds = get_banners_btns(data=btns, level=level, 
                              menu_name=menu_name, category=category)

    return {"kbds": kbds, "message": message, "state": state}

async def get_admin_menu(session: AsyncSession,
                         level: int, 
                         menu_name: str,
                         podcategory: int | str | None = None,
                         category: int | str | None = None,
                         product_id: int | None = None):
    if level == 1:
        return await catalog(session, level, menu_name, category, podcategory)
    elif level == 2:
        return await product(session, level, menu_name, product_id, category, podcategory)
    elif level == 3:
        return await banner_change(session, level, menu_name, category)